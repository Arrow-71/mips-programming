#title: swap
#author: Gabriel Alirez
#purpose: take unsorted list from user and print out the sorted order 


.data
array_size: .word 10
array_base: .word 10


.text
.globl main
main:
li $v0,4
la $a0,in
syscall
############################ this chunk accpets 10 numbers from the user ############################################
jal TakeInt
move $t0,$v0
jal TakeInt
move $t1,$v0
jal TakeInt
move $t2,$v0
jal TakeInt
move $t3,$v0
jal TakeInt
move $t4,$v0
jal TakeInt
move $t5,$v0
jal TakeInt
move $t6,$v0
jal TakeInt
move $t7,$v0
jal TakeInt
move $t8,$v0
jal TakeInt
move $t9,$v0
######################################################################################################################

########################################### this chunk puts the 10 integers into the array ########################## 
sw $t0, array_base($s0)
addi $s0,$s0,4
sw $t1, array_base($s0)
addi $s0,$s0,4
sw $t2, array_base($s0)
addi $s0,$s0,4
sw $t3, array_base($s0)
addi $s0,$s0,4
sw $t4, array_base($s0)
addi $s0,$s0,4
sw $t5, array_base($s0)
addi $s0,$s0,4
sw $t6, array_base($s0)
addi $s0,$s0,4
sw $t7, array_base($s0)
addi $s0,$s0,4
sw $t8, array_base($s0)
addi $s0,$s0,4
sw $t9, array_base($s0)
addi $s0,$s0,4
#####################################################################################################################

#loads the users values into a0 
la $a0, array_base
#loads the value .word 10 into register $a1
lw $a1, array_size
#prints out unsorted list
jal PrintIntArray

la $a0, array_base

lw $a1, array_size
jal BubbleSort

jal PrintNewLine

la $a0, array_base

lw $a1, array_size
#prints out sorted list
jal PrintIntArray

jal exit

.text

# Input Params: $a0 - array
# $a1 - array size
# Register conventions:
# $s0 - array base
# $s1 - array size
# $s2 - outer loop counter
# $s3 - inner loop counter
BubbleSort:
addi $sp, $sp -20 # save stack information
sw $ra, 0($sp)
sw $s0, 4($sp) # need to keep and restore save registers
sw $s1, 8($sp)
sw $s2, 12($sp)
sw $s3, 16($sp)
#loads the users values into s0 
move $s0, $a0
#saves .word 10 to s1
move $s1, $a1
#creates interation variable
addi $s2, $zero, 0 #outer loop counter

OuterLoop:
#takes 10 - 1 and places it in $t1 
addi $t1, $s1, -1
#sets to to 1 if s2 < t1 or zero of t1 > s2
slt $t0, $s2, $t1
#if t0 = 0 branches to endouterloop
beqz $t0, EndOuterLoop
#hit this line if code if t0 = 1
addi $s3, $zero, 0 #inner loop counter


InnerLoop:
addi $t1, $s1, -1
sub $t1, $t1, $s2
slt $t0, $s3, $t1
beqz $t0, EndInnerLoop
sll $t4, $s3, 2 
add $t5, $s0, $t4
lw $t2, 0($t5)
addi $t6, $t5, 4
lw $t3, 0($t6)
sgt $t0, $t2, $t3
beqz $t0, NotGreater
move $a0, $s0
move $a1, $s3
addi $t0, $s3, 1
move $a2, $t0
jal Swap 
NotGreater:
addi $s3, $s3, 1
b InnerLoop
EndInnerLoop:addi $s2, $s2, 1
b OuterLoop
EndOuterLoop:
lw $ra, 0($sp) #restore stack information
lw $s0, 4($sp)
lw $s1, 8($sp)
lw $s2, 12($sp)
lw $s3, 16($sp)
addi $sp, $sp 20
jr $ra
# Input parameters: $a0 - the array containing elements to swap
# $a1 - index of element 1
# $a2 - index of elelemnt 2
# Side Effects: Array is changed to swap element 1 and 2
Swap:
sll $t0, $a1, 2 # calcualate address of element 1
add $t0, $a0, $t0
sll $t1, $a2, 2 # calculate address of element 2
add $t1, $a0, $t1
lw $t2, 0($t0) #swap elements
lw $t3, 0($t1)
sw $t2, 0($t1)
sw $t3, 0($t0)
jr $ra

# inputs: $a0 - the base address of the array
# $a1 - the size of the array

PrintIntArray:
addi $sp, $sp, -16 # Stack record
sw $ra, 0($sp)
sw $s0, 4($sp)
sw $s1, 8($sp)
sw $s2, 12($sp)
move $s0, $a0 # save the base of the array to $s0
# initialization for counter loop
# $s1 is the ending index of the loop
# $s2 is the loop counter
move $s1, $a1
move $s2, $zero
la $a0 open_bracket # print open bracket
jal PrintString
loop:
# check ending condition
sge $t0, $s2, $s1
bnez $t0, end_loop
sll $t0, $s2, 2 # Multiply the loop counter by
# by 4 to get offset (each element
# is 4 big).
add $t0, $t0, $s0 # address of next array element
lw $a1, 0($t0) # Next array element
la $a0, comma
jal PrintInt # print the integer from array
addi $s2, $s2, 1 #increment $s0
b loop
end_loop:
li $v0, 4 # print close bracket
la $a0, close_bracket
syscall

lw $ra, 0($sp)
lw $s0, 4($sp)
lw $s1, 8($sp)
lw $s2, 12($sp) # restore stack and return
addi $sp, $sp, 16
jr $ra

.data
test:.asciiz "did i make it this far?"
in: .asciiz "please enter 10 numbers\n"
open_bracket: .asciiz "["
close_bracket: .asciiz "]"
comma: .asciiz ","
.include "util.asm"